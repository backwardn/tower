var N=null,E="",T="t",U="u",searchIndex={};
var R=["result","to_owned","clone_into","try_from","try_into","borrow","borrow_mut","type_id","typeid","identity","formatter","Identity","Service","MakeService","Response","poll_ready","poll_discover","context","ServiceList","ServiceStream","Discover","Conditionally dispatch requests to the inner service based…","tower_filter","tower_filter::error","tower_filter::future","FilterLayer","Predicate","ResponseFuture","request","Error types","tower_load_shed","Future types","tower_load_shed::error","to_string","tower_load_shed::future","try_poll","LoadShedLayer","LoadShed","Overloaded","tower_reconnect","make_service","tower_reconnect::future","Reconnect","Extract the wrapped `Service`.","callallunordered","into_inner","take_service","optional","tower_util","try_poll_next","option","tower_util::error::optional","tower_util::future::optional","servicefn","future","poll_next","BoxService","UnsyncBoxService","CallAllUnordered","Optional","ServiceExt","ServiceFn","Obtains a mutable reference to a service in the ready set…","Checks whether the referenced endpoint is ready.","failed","tower_ready_cache","tower_ready_cache::cache","tower_ready_cache::error","Equivalent","ReadyCache","tower_spawn_ready","tower_spawn_ready::future","target","SpawnReadyLayer","MakeSpawnReady","SpawnReady","MakeFuture","BackgroundReady","tower_load","tower_load::peak_ewma","tower_load::pending_requests","instrument","ordering","partial_cmp","Yields the next discovery change set.","change","Constant","InstrumentFuture","PeakEwmaDiscover","PendingRequestsDiscover","Instrument","NoInstrument","PeakEwma","PendingRequests","default","duration","Future","tower_buffer","tower_buffer::error","tower_buffer::future","BufferLayer","ServiceError","overdrawn","tower_retry","clone_request","tower_retry::budget","tower_retry::future","RetryLayer","Overdrawn","tower_timeout","tower_timeout::error","tower_timeout::future","TimeoutLayer","Enforces a limit on the concurrent number of requests the…","Enforces a rate limit on the number of requests the…","ConcurrencyLimitLayer","ConcurrencyLimit","tower_limit","RateLimitLayer","RateLimit","tower_limit::rate","Get a reference to the inner service","Get a mutable reference to the inner service","Consume `self`, returning the inner service","tower_limit::concurrency::future","Mock `Service` that can be used in tests.","tower_test::mock","send_error","Resolve the pending request future for the linked request…","tower_test","tower_test::mock::error","tower_test::mock::future","tower_test::mock::spawn","SendResponse","tower_balance","from_entropy","Initializes a P2C load balancer from the OS's entropy…","tower_balance::error","tower_balance::p2c","tower_balance::pool","BalanceLayer","BalanceMake","PoolDiscoverer","tower::buffer","tower::limit::concurrency","tower::limit","tower::load_shed","tower::retry","tower::timeout","servicebuilder","An extension trait for `Service`s that provides a variety…","A future yielding the service when it is ready to accept a…","Consume this `Service`, calling with the providing request…","Process all requests from the given `Stream`, and produce…","tower::buffer::error","tower::buffer::future","tower::discover","tower::limit::concurrency::future","tower::limit::rate","tower::load_shed::error","tower::load_shed::future","tower::retry::budget","tower::retry::future","tower::timeout::error","tower::timeout::future","tower::layer","tower::builder","tower::util","responsefuture","servicelist","servicestream","concurrencylimitlayer","loadshedlayer","oneshot","bufferlayer","concurrencylimit","ratelimitlayer","retrylayer","timeoutlayer","callall","ServiceBuilder","Buffer requests with a bounded buffer","Adds a buffer in front of an inner service.","An error produced by a `Service` wrapped by a `Buffer`","An error when the buffer's worker closes unexpectedly.","Future eventually completed with the response to the…","Create a new `BufferLayer` with the provided `bound`.","Creates a new `Buffer` wrapping `service`.","Creates a new `Buffer` wrapping `service` but returns the…","Static service discovery based on a predetermined list of…","Dynamic service discovery based on a stream of service…","A change in the service set","A new service identified by key `K` was identified.","The service identified by key `K` disappeared.","Provide a uniform set of services able to satisfy a request.","NewService key","The type of `Service` yielded by this `Discover`.","Error produced during discovery","A no-op middleware.","Two middlewares chained together.","Create a new `Identity` value","Create a new `Stack`.","Decorates a `Service`, transforming either the request or…","The wrapped service","Wrap the given service with the middleware, returning a…","concurrency","Limit the max number of requests being concurrently…","Future for the `ConcurrencyLimit` service.","Create a new concurrency limit layer.","Create a new concurrency limiter.","Limit the rate at which requests are processed.","A rate of requests per time period.","Create new rate limit layer.","Create a new rate.","Create a new rate limiter","A `tower-layer` to wrap services in `LoadShed` middleware.","A `Service` that sheds load when the inner service isn't…","An error returned by `Overload` when the underlying…","Future for the `LoadShed` service.","Creates a new layer.","Wraps a service in `LoadShed` middleware.","Retry requests based on a policy","Configure retrying requests of \"failed\" responses.","A retry \"budget\" for allowing only a certain amount of…","Represents a \"budget\" for retrying requests.","Indicates that it is not currently allowed to \"withdraw\"…","Create a `Budget` that allows for a certain percent of the…","Store a \"deposit\" in the budget, which will be used to…","Check whether there is enough \"balance\" in the budget to…","The `Future` returned by a `Retry` service.","Create a new `RetryLayer` from a retry policy","A \"retry policy\" to classify if a request should be retried.","The `Future` type returned by `Policy::retry()`.","Check the policy if a certain request should be retried.","Tries to clone a request before being passed to the inner…","Retry the inner service depending on this `Policy`.","An asynchronous function from a `Request` to a `Response`.","Responses given by the service.","Errors produced by the service.","The future response value.","Returns `Poll::Ready(Ok(()))` when the service is able to…","Process the request and return the response asynchronously.","Applies a timeout to requests via the supplied inner…","Applies a timeout to requests.","The timeout elapsed.","Construct a new elapsed error","`Timeout` response future","Create a timeout from a duration","Creates a new Timeout","A boxed `Service + Send` trait object.","A boxed `Service` trait object.","A `Future` consuming a `Service` and request, waiting…","Optionally forwards requests to an inner service.","Future yielding a `Service` once the service is ready to…","This is a `futures::Stream` of responses resulting from…","A stream of responses received from the inner service in…","Combine two different service types into a single type.","One type of backing `Service`.","The other type of backing `Service`.","service_fn","Returns a new `ServiceFn` with the given closure.","Create new `CallAll` combinator.","unordered","Return responses as they are ready, regardless of the…","Create new `CallAllUnordered` combinator.","Create a new `OptionService`","call_all"];
searchIndex["tower"]={"doc":"`fn(Request) -> Future<Response>`","i":[[0,"error",R[143],R[29],N,N],[3,R[101],R[154],R[183],N,N],[3,"Closed",E,R[184],N,N],[0,R[54],R[143],R[31],N,N],[3,R[27],R[155],R[185],N,N],[3,R[100],R[143],R[181],N,N],[3,"Buffer",E,R[182],N,N],[8,R[20],R[156],R[194],N,N],[16,"Key",E,R[195],0,N],[16,R[12],E,R[196],0,N],[16,"Error",E,R[197],0,N],[10,R[16],E,R[84],0,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[4,"Change",E,R[191],N,N],[13,"Insert",E,R[192],1,N],[13,"Remove",E,R[193],1,N],[3,R[18],E,R[189],N,N],[3,R[19],E,R[190],N,N],[0,R[205],R[145],R[206],N,N],[0,R[54],R[144],R[31],N,N],[3,R[27],R[157],R[207],N,N],[3,R[115],R[144],R[113],N,N],[3,R[116],E,R[113],N,N],[0,"rate",R[145],R[210],N,N],[3,R[118],R[158],R[114],N,N],[3,"Rate",E,R[211],N,N],[3,R[119],E,R[114],N,N],[0,"error",R[146],R[29],N,N],[3,R[38],R[159],R[217],N,N],[0,R[54],R[146],R[31],N,N],[3,R[27],R[160],R[218],N,N],[3,R[37],R[146],R[216],N,N],[3,R[36],E,R[215],N,N],[0,"budget",R[147],R[223],N,N],[3,"Budget",R[161],R[224],N,N],[3,R[108],E,R[225],N,N],[0,R[54],R[147],R[31],N,N],[3,R[27],R[162],R[229],N,N],[3,"Retry",R[147],R[222],N,N],[3,R[107],E,R[221],N,N],[8,"Policy",E,R[231],N,N],[16,R[96],E,R[232],2,N],[10,"retry",E,R[233],2,[[[R[0]],["res"],["req"],["self"],["e"]],[R[50]]]],[10,R[104],E,R[234],2,[[["req"],["self"]],[R[50]]]],[0,"error",R[148],R[29],N,N],[3,"Elapsed",R[163],R[244],N,N],[0,R[54],R[148],R[31],N,N],[3,R[27],R[164],R[246],N,N],[3,"Timeout",R[148],R[243],N,N],[3,R[112],E,R[242],N,N],[8,"Layer",R[165],R[202],N,N],[16,R[12],E,R[203],3,N],[10,"layer",E,R[204],3,[[["s"],["self"]]]],[3,R[11],E,R[198],N,N],[3,"Stack",E,R[199],N,N],[8,R[60],"tower",R[150],N,N],[11,"ready",E,R[151],4,[[["self"]],["ready"]]],[11,R[173],E,R[152],4,[[[R[28]]],[R[173]]]],[11,R[266],E,R[153],4,[[["s"]],[R[179]]]],[8,R[12],E,R[236],N,N],[16,R[14],E,R[237],5,N],[16,"Error",E,R[238],5,N],[16,R[96],E,R[239],5,N],[10,R[15],E,R[240],5,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[10,"call",E,R[241],5,[[["self"],[R[28]]]]],[5,R[259],E,R[260],N,[[[T]],[R[53]]]],[0,"builder",E,"Builder types to compose layers and services",N,N],[3,R[180],R[166],"Declaratively construct Service values.",N,N],[11,"new",E,"Create a new `ServiceBuilder`.",6,[[],["self"]]],[11,"layer",E,"Add a new layer `T` into the `ServiceBuilder`.",6,[[[T]],[["stack"],[R[149],["stack"]]]]],[11,"buffer",E,"Buffer requests when when the next layer is out of capacity.",6,[[["usize"]],[["stack",[R[174]]],[R[149],["stack"]]]]],[11,"concurrency_limit",E,"Limit the max number of in-flight requests.",6,[[["usize"]],[[R[149],["stack"]],["stack",[R[171]]]]]],[11,"load_shed",E,"Drop requests when the next layer is unable to respond to…",6,[[],[[R[149],["stack"]],["stack",[R[172]]]]]],[11,"rate_limit",E,"Limit requests to at most `num` per the given duration",6,[[["u64"],[R[95]]],[[R[149],["stack"]],["stack",[R[176]]]]]],[11,"retry",E,"Retry failed requests.",6,[[["p"]],[["stack",[R[177]]],[R[149],["stack"]]]]],[11,"timeout",E,"Fail requests that take longer than `timeout`.",6,[[[R[95]]],[[R[149],["stack"]],["stack",[R[178]]]]]],[11,R[45],E,"Obtains the underlying `Layer` implementation.",6,[[],["l"]]],[11,"service",E,"Wrap the service `S` with the layers.",6,[[["s"]]]],[0,"util","tower","Combinators for working with `Service`s",N,N],[3,R[56],R[167],R[249],N,N],[3,"CallAll",E,R[254],N,N],[3,R[58],E,R[255],N,N],[4,"Either",E,R[256],N,N],[13,"A",E,R[257],7,N],[13,"B",E,R[258],7,N],[3,"Oneshot",E,R[251],N,N],[3,R[59],E,R[252],N,N],[3,"Ready",E,R[253],N,N],[8,R[60],E,R[150],N,N],[11,"ready",E,R[151],4,[[["self"]],["ready"]]],[11,R[173],E,R[152],4,[[[R[28]]],[R[173]]]],[11,R[266],E,R[153],4,[[["s"]],[R[179]]]],[3,R[57],E,R[250],N,N],[11,"into",R[154],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[33],E,E,8,[[["self"]],["string"]]],[11,R[3],E,E,8,[[[U]],[R[0]]]],[11,R[4],E,E,8,[[],[R[0]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[33],E,E,9,[[["self"]],["string"]]],[11,R[3],E,E,9,[[[U]],[R[0]]]],[11,R[4],E,E,9,[[],[R[0]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,"into",R[155],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[3],E,E,10,[[[U]],[R[0]]]],[11,R[4],E,E,10,[[],[R[0]]]],[11,R[5],E,E,10,[[["self"]],[T]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,R[35],E,E,10,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[143],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[3],E,E,11,[[[U]],[R[0]]]],[11,R[4],E,E,11,[[],[R[0]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[1],E,E,12,[[["self"]],[T]]],[11,R[2],E,E,12,[[["self"],[T]]]],[11,R[3],E,E,12,[[[U]],[R[0]]]],[11,R[4],E,E,12,[[],[R[0]]]],[11,R[5],E,E,12,[[["self"]],[T]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,"into",R[156],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[3],E,E,13,[[[U]],[R[0]]]],[11,R[4],E,E,13,[[],[R[0]]]],[11,R[5],E,E,13,[[["self"]],[T]]],[11,R[6],E,E,13,[[["self"]],[T]]],[11,R[7],E,E,13,[[["self"]],[R[8]]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[3],E,E,14,[[[U]],[R[0]]]],[11,R[4],E,E,14,[[],[R[0]]]],[11,R[5],E,E,14,[[["self"]],[T]]],[11,R[6],E,E,14,[[["self"]],[T]]],[11,R[7],E,E,14,[[["self"]],[R[8]]]],[11,"into",R[157],E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[3],E,E,15,[[[U]],[R[0]]]],[11,R[4],E,E,15,[[],[R[0]]]],[11,R[5],E,E,15,[[["self"]],[T]]],[11,R[6],E,E,15,[[["self"]],[T]]],[11,R[7],E,E,15,[[["self"]],[R[8]]]],[11,R[35],E,E,15,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[144],E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[1],E,E,16,[[["self"]],[T]]],[11,R[2],E,E,16,[[["self"],[T]]]],[11,R[3],E,E,16,[[[U]],[R[0]]]],[11,R[4],E,E,16,[[],[R[0]]]],[11,R[5],E,E,16,[[["self"]],[T]]],[11,R[6],E,E,16,[[["self"]],[T]]],[11,R[7],E,E,16,[[["self"]],[R[8]]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[1],E,E,17,[[["self"]],[T]]],[11,R[2],E,E,17,[[["self"],[T]]]],[11,R[3],E,E,17,[[[U]],[R[0]]]],[11,R[4],E,E,17,[[],[R[0]]]],[11,R[5],E,E,17,[[["self"]],[T]]],[11,R[6],E,E,17,[[["self"]],[T]]],[11,R[7],E,E,17,[[["self"]],[R[8]]]],[11,"into",R[158],E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[3],E,E,18,[[[U]],[R[0]]]],[11,R[4],E,E,18,[[],[R[0]]]],[11,R[5],E,E,18,[[["self"]],[T]]],[11,R[6],E,E,18,[[["self"]],[T]]],[11,R[7],E,E,18,[[["self"]],[R[8]]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[1],E,E,19,[[["self"]],[T]]],[11,R[2],E,E,19,[[["self"],[T]]]],[11,R[3],E,E,19,[[[U]],[R[0]]]],[11,R[4],E,E,19,[[],[R[0]]]],[11,R[5],E,E,19,[[["self"]],[T]]],[11,R[6],E,E,19,[[["self"]],[T]]],[11,R[7],E,E,19,[[["self"]],[R[8]]]],[11,"into",E,E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[3],E,E,20,[[[U]],[R[0]]]],[11,R[4],E,E,20,[[],[R[0]]]],[11,R[5],E,E,20,[[["self"]],[T]]],[11,R[6],E,E,20,[[["self"]],[T]]],[11,R[7],E,E,20,[[["self"]],[R[8]]]],[11,"into",R[159],E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[33],E,E,21,[[["self"]],["string"]]],[11,R[3],E,E,21,[[[U]],[R[0]]]],[11,R[4],E,E,21,[[],[R[0]]]],[11,R[5],E,E,21,[[["self"]],[T]]],[11,R[6],E,E,21,[[["self"]],[T]]],[11,R[7],E,E,21,[[["self"]],[R[8]]]],[11,"into",R[160],E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[3],E,E,22,[[[U]],[R[0]]]],[11,R[4],E,E,22,[[],[R[0]]]],[11,R[5],E,E,22,[[["self"]],[T]]],[11,R[6],E,E,22,[[["self"]],[T]]],[11,R[7],E,E,22,[[["self"]],[R[8]]]],[11,R[35],E,E,22,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[146],E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[1],E,E,23,[[["self"]],[T]]],[11,R[2],E,E,23,[[["self"],[T]]]],[11,R[3],E,E,23,[[[U]],[R[0]]]],[11,R[4],E,E,23,[[],[R[0]]]],[11,R[5],E,E,23,[[["self"]],[T]]],[11,R[6],E,E,23,[[["self"]],[T]]],[11,R[7],E,E,23,[[["self"]],[R[8]]]],[11,"into",E,E,24,[[],[U]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[1],E,E,24,[[["self"]],[T]]],[11,R[2],E,E,24,[[["self"],[T]]]],[11,R[3],E,E,24,[[[U]],[R[0]]]],[11,R[4],E,E,24,[[],[R[0]]]],[11,R[5],E,E,24,[[["self"]],[T]]],[11,R[6],E,E,24,[[["self"]],[T]]],[11,R[7],E,E,24,[[["self"]],[R[8]]]],[11,"into",R[161],E,25,[[],[U]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[3],E,E,25,[[[U]],[R[0]]]],[11,R[4],E,E,25,[[],[R[0]]]],[11,R[5],E,E,25,[[["self"]],[T]]],[11,R[6],E,E,25,[[["self"]],[T]]],[11,R[7],E,E,25,[[["self"]],[R[8]]]],[11,"into",E,E,26,[[],[U]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[3],E,E,26,[[[U]],[R[0]]]],[11,R[4],E,E,26,[[],[R[0]]]],[11,R[5],E,E,26,[[["self"]],[T]]],[11,R[6],E,E,26,[[["self"]],[T]]],[11,R[7],E,E,26,[[["self"]],[R[8]]]],[11,"into",R[162],E,27,[[],[U]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[3],E,E,27,[[[U]],[R[0]]]],[11,R[4],E,E,27,[[],[R[0]]]],[11,R[5],E,E,27,[[["self"]],[T]]],[11,R[6],E,E,27,[[["self"]],[T]]],[11,R[7],E,E,27,[[["self"]],[R[8]]]],[11,R[35],E,E,27,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[147],E,28,[[],[U]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[1],E,E,28,[[["self"]],[T]]],[11,R[2],E,E,28,[[["self"],[T]]]],[11,R[3],E,E,28,[[[U]],[R[0]]]],[11,R[4],E,E,28,[[],[R[0]]]],[11,R[5],E,E,28,[[["self"]],[T]]],[11,R[6],E,E,28,[[["self"]],[T]]],[11,R[7],E,E,28,[[["self"]],[R[8]]]],[11,"into",E,E,29,[[],[U]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[3],E,E,29,[[[U]],[R[0]]]],[11,R[4],E,E,29,[[],[R[0]]]],[11,R[5],E,E,29,[[["self"]],[T]]],[11,R[6],E,E,29,[[["self"]],[T]]],[11,R[7],E,E,29,[[["self"]],[R[8]]]],[11,"into",R[163],E,30,[[],[U]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[33],E,E,30,[[["self"]],["string"]]],[11,R[3],E,E,30,[[[U]],[R[0]]]],[11,R[4],E,E,30,[[],[R[0]]]],[11,R[5],E,E,30,[[["self"]],[T]]],[11,R[6],E,E,30,[[["self"]],[T]]],[11,R[7],E,E,30,[[["self"]],[R[8]]]],[11,"into",R[164],E,31,[[],[U]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[3],E,E,31,[[[U]],[R[0]]]],[11,R[4],E,E,31,[[],[R[0]]]],[11,R[5],E,E,31,[[["self"]],[T]]],[11,R[6],E,E,31,[[["self"]],[T]]],[11,R[7],E,E,31,[[["self"]],[R[8]]]],[11,R[35],E,E,31,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[148],E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[1],E,E,32,[[["self"]],[T]]],[11,R[2],E,E,32,[[["self"],[T]]]],[11,R[3],E,E,32,[[[U]],[R[0]]]],[11,R[4],E,E,32,[[],[R[0]]]],[11,R[5],E,E,32,[[["self"]],[T]]],[11,R[6],E,E,32,[[["self"]],[T]]],[11,R[7],E,E,32,[[["self"]],[R[8]]]],[11,"into",E,E,33,[[],[U]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[3],E,E,33,[[[U]],[R[0]]]],[11,R[4],E,E,33,[[],[R[0]]]],[11,R[5],E,E,33,[[["self"]],[T]]],[11,R[6],E,E,33,[[["self"]],[T]]],[11,R[7],E,E,33,[[["self"]],[R[8]]]],[11,"into",R[165],E,34,[[],[U]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[1],E,E,34,[[["self"]],[T]]],[11,R[2],E,E,34,[[["self"],[T]]]],[11,R[3],E,E,34,[[[U]],[R[0]]]],[11,R[4],E,E,34,[[],[R[0]]]],[11,R[5],E,E,34,[[["self"]],[T]]],[11,R[6],E,E,34,[[["self"]],[T]]],[11,R[7],E,E,34,[[["self"]],[R[8]]]],[11,"into",E,E,35,[[],[U]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[1],E,E,35,[[["self"]],[T]]],[11,R[2],E,E,35,[[["self"],[T]]]],[11,R[3],E,E,35,[[[U]],[R[0]]]],[11,R[4],E,E,35,[[],[R[0]]]],[11,R[5],E,E,35,[[["self"]],[T]]],[11,R[6],E,E,35,[[["self"]],[T]]],[11,R[7],E,E,35,[[["self"]],[R[8]]]],[11,"into",R[166],E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[1],E,E,6,[[["self"]],[T]]],[11,R[2],E,E,6,[[["self"],[T]]]],[11,R[3],E,E,6,[[[U]],[R[0]]]],[11,R[4],E,E,6,[[],[R[0]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"into",R[167],E,36,[[],[U]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[3],E,E,36,[[[U]],[R[0]]]],[11,R[4],E,E,36,[[],[R[0]]]],[11,R[5],E,E,36,[[["self"]],[T]]],[11,R[6],E,E,36,[[["self"]],[T]]],[11,R[7],E,E,36,[[["self"]],[R[8]]]],[11,"into",E,E,37,[[],[U]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[3],E,E,37,[[[U]],[R[0]]]],[11,R[4],E,E,37,[[],[R[0]]]],[11,R[5],E,E,37,[[["self"]],[T]]],[11,R[6],E,E,37,[[["self"]],[T]]],[11,R[7],E,E,37,[[["self"]],[R[8]]]],[11,R[49],E,E,37,[[[R[17]],["s"],["pin"]],[[R[50],[R[0]]],["poll",[R[50]]]]]],[11,"into",E,E,38,[[],[U]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[3],E,E,38,[[[U]],[R[0]]]],[11,R[4],E,E,38,[[],[R[0]]]],[11,R[5],E,E,38,[[["self"]],[T]]],[11,R[6],E,E,38,[[["self"]],[T]]],[11,R[7],E,E,38,[[["self"]],[R[8]]]],[11,R[49],E,E,38,[[[R[17]],["s"],["pin"]],[[R[50],[R[0]]],["poll",[R[50]]]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[1],E,E,7,[[["self"]],[T]]],[11,R[2],E,E,7,[[["self"],[T]]]],[11,R[3],E,E,7,[[[U]],[R[0]]]],[11,R[4],E,E,7,[[],[R[0]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[35],E,E,7,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,39,[[],[U]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[3],E,E,39,[[[U]],[R[0]]]],[11,R[4],E,E,39,[[],[R[0]]]],[11,R[5],E,E,39,[[["self"]],[T]]],[11,R[6],E,E,39,[[["self"]],[T]]],[11,R[7],E,E,39,[[["self"]],[R[8]]]],[11,R[35],E,E,39,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,40,[[],[U]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[3],E,E,40,[[[U]],[R[0]]]],[11,R[4],E,E,40,[[],[R[0]]]],[11,R[5],E,E,40,[[["self"]],[T]]],[11,R[6],E,E,40,[[["self"]],[T]]],[11,R[7],E,E,40,[[["self"]],[R[8]]]],[11,"into",E,E,41,[[],[U]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[3],E,E,41,[[[U]],[R[0]]]],[11,R[4],E,E,41,[[],[R[0]]]],[11,R[5],E,E,41,[[["self"]],[T]]],[11,R[6],E,E,41,[[["self"]],[T]]],[11,R[7],E,E,41,[[["self"]],[R[8]]]],[11,R[35],E,E,41,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,42,[[],[U]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[3],E,E,42,[[[U]],[R[0]]]],[11,R[4],E,E,42,[[],[R[0]]]],[11,R[5],E,E,42,[[["self"]],[T]]],[11,R[6],E,E,42,[[["self"]],[T]]],[11,R[7],E,E,42,[[["self"]],[R[8]]]],[11,"clone",R[143],E,12,[[["self"]],["buffer"]]],[11,"fmt",E,E,11,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[154],E,8,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,9,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[143],E,12,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[155],E,10,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"poll",E,E,10,[[["pin",[R[168]]],[R[17]],[R[168]]],["poll"]]],[11,R[15],R[143],E,12,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,12,[[["self"],[R[28]]]]],[11,"fmt",R[154],E,8,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,9,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"layer",R[143],E,11,[[["s"],["self"]]]],[11,"source",R[154],E,8,[[["self"]],[["error"],[R[50],["error"]]]]],[11,"clone",R[165],E,35,[[["self"]],["stack"]]],[11,"clone",E,E,34,[[["self"]],[R[9]]]],[11,"fmt",E,E,34,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,35,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,R[94],E,E,34,[[],[R[9]]]],[11,"layer",E,E,35,[[["s"],["self"]]]],[11,"layer",E,E,34,[[["s"],["self"]]]],[11,R[16],R[156],E,13,[[[R[17]],[R[169]],["pin",[R[169]]]],[[R[0],[R[85]]],["poll",[R[0]]]]]],[11,R[16],E,E,14,[[["pin",[R[170]]],[R[170]],[R[17]]],[[R[0],[R[85]]],["poll",[R[0]]]]]],[11,"fmt",E,E,13,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,14,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,1,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"drop",R[157],E,15,[[["self"]]]],[11,R[15],R[144],E,17,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,17,[[["self"],[R[28]]]]],[11,R[15],R[158],E,20,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,20,[[["self"],[R[28]]]]],[11,"clone",R[144],E,17,[[["self"]],[R[175]]]],[11,"clone",E,E,16,[[["self"]],[R[171]]]],[11,"clone",R[158],E,19,[[["self"]],["rate"]]],[11,"layer",E,E,18,[[["s"],["self"]]]],[11,"layer",R[144],E,16,[[["s"],["self"]]]],[11,"fmt",R[158],E,20,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[157],E,15,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[144],E,17,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[158],E,18,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,19,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[144],E,16,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"poll",R[157],E,15,[[[R[168]],["pin",[R[168]]],[R[17]]],["poll"]]],[11,"layer",R[146],E,24,[[["s"],["self"]]]],[11,"clone",E,E,23,[[["self"]],["loadshed"]]],[11,"clone",E,E,24,[[["self"]],[R[172]]]],[11,"fmt",E,E,24,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[159],E,21,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[160],E,22,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[146],E,23,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[159],E,21,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"poll",R[160],E,22,[[[R[17]],["pin",[R[168]]],[R[168]]],["poll"]]],[11,R[15],R[146],E,23,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,23,[[["self"],["req"]]]],[11,"clone",R[147],E,28,[[["self"]],["retry"]]],[11,"fmt",R[162],E,27,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[161],E,25,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[147],E,28,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,29,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[161],E,26,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,R[15],R[147],E,28,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,28,[[["self"],[R[28]]]]],[11,"poll",R[162],E,27,[[[R[17]],["pin",[R[168]]],[R[168]]],["poll"]]],[11,"layer",R[147],E,29,[[["s"],["self"]]]],[11,R[94],R[161],E,25,[[],["budget"]]],[11,"clone",R[148],E,32,[[["self"]],["timeout"]]],[11,"fmt",E,E,32,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[164],E,31,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[148],E,33,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",R[163],E,30,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"poll",R[164],E,31,[[["pin",[R[168]]],[R[168]],[R[17]]],["poll"]]],[11,R[15],R[148],E,32,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,32,[[["self"],[R[28]]]]],[11,"fmt",R[163],E,30,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"layer",R[148],E,33,[[["s"],["self"]]]],[11,"clone",R[167],E,7,[[["self"]],["either"]]],[11,R[15],E,E,42,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,42,[[["self"],[T]],[["pin",["box"]],["box",[R[54]]]]]],[11,R[15],E,E,7,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,7,[[["self"],[R[28]]]]],[11,R[15],E,E,36,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,36,[[["self"],[T]],[["box",[R[54]]],["pin",["box"]]]]],[11,R[15],E,E,40,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,40,[[["self"],[R[28]]]]],[11,"fmt",E,E,39,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,41,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,37,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,36,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,40,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,7,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,38,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"fmt",E,E,42,[[[R[10]],["self"]],[["error"],[R[0],["error"]]]]],[11,"poll",E,E,39,[[[R[17]],["pin",[R[173]]],[R[173]]],["poll"]]],[11,"poll",E,E,41,[[[R[17]],["pin",["ready"]],["ready"]],["poll"]]],[11,"poll",E,E,7,[[["pin",["either"]],["either"],[R[17]]],["poll"]]],[11,R[55],E,E,38,[[["pin",[R[44]]],[R[44]],[R[17]]],[[R[50]],["poll",[R[50]]]]]],[11,R[55],E,E,37,[[[R[179]],["pin",[R[179]]],[R[17]]],[["poll",[R[50]]],[R[50]]]]],[11,"clone",R[166],E,6,[[["self"]],[R[149]]]],[11,"fmt",E,E,6,[[["self"],[R[10]]],[R[0]]]],[11,"new",R[143],R[186],11,[[["usize"]],[R[174]]]],[11,"new",E,R[187],12,[[[T],["usize"]],["buffer"]]],[11,"pair",E,R[188],12,[[[T],["usize"]]]],[11,"new",R[156],E,13,[[[T]],[R[169]]]],[11,"new",E,E,14,[[["s"]],[R[170]]]],[11,"new",R[144],R[208],16,[[["usize"]],[R[171]]]],[11,"new",E,R[209],17,[[[T],["usize"]],[R[175]]]],[11,"get_ref",E,R[121],17,[[["self"]],[T]]],[11,"get_mut",E,R[122],17,[[["self"]],[T]]],[11,R[45],E,R[123],17,[[],[T]]],[11,"new",R[158],R[212],18,[[["u64"],[R[95]]],[R[176]]]],[11,"new",E,R[213],19,[[["u64"],[R[95]]],["rate"]]],[11,"new",E,R[214],20,[[[T],["rate"]],["ratelimit"]]],[11,"get_ref",E,R[121],20,[[["self"]],[T]]],[11,"get_mut",E,R[122],20,[[["self"]],[T]]],[11,R[45],E,R[123],20,[[],[T]]],[11,"new",R[146],R[220],23,[[["s"]],["loadshed"]]],[11,"new",E,R[219],24,[[],[R[172]]]],[11,"new",R[161],R[226],25,[[["f32"],["u32"],[R[95]]],["budget"]]],[11,"deposit",E,R[227],25,[[["self"]]]],[11,"withdraw",E,R[228],25,[[["self"]],[[R[0],[R[102]]],[R[102]]]]],[11,"new",R[147],R[235],28,[[["s"],["p"]],["retry"]]],[11,"new",E,R[230],29,[[["p"]],[R[177]]]],[11,"new",R[163],R[245],30,[[],["elapsed"]]],[11,"new",R[148],R[248],32,[[[T],[R[95]]],["timeout"]]],[11,"new",E,R[247],33,[[[R[95]]],[R[178]]]],[11,"new",R[165],R[200],34,[[],[R[9]]]],[11,"new",E,R[201],35,[[["inner"],["outer"]],["stack"]]],[11,"new",R[167],E,36,[[["s"]],["boxservice"]]],[11,"new",E,R[261],37,[[["s"],["svc"]],[R[179]]]],[11,R[45],E,R[43],37,[[],["svc"]]],[11,R[46],E,R[43],37,[[[R[179]],["pin",[R[179]]]],["svc"]]],[11,R[262],E,R[263],37,[[],[R[44]]]],[11,"new",E,R[264],38,[[["s"],["svc"]],[R[44]]]],[11,R[45],E,R[43],38,[[],["svc"]]],[11,R[46],E,R[43],38,[[["pin",[R[44]]],[R[44]]],["svc"]]],[11,"new",E,E,39,[[["s"],["req"]],[R[173]]]],[11,"new",E,R[265],40,[[[R[50]]],[R[47]]]],[11,"new",E,E,41,[[[T]],["ready"]]],[11,"new",E,E,42,[[["s"]],["unsyncboxservice"]]]],"p":[[8,R[20]],[4,"Change"],[8,"Policy"],[8,"Layer"],[8,R[60]],[8,R[12]],[3,R[180]],[4,"Either"],[3,R[101]],[3,"Closed"],[3,R[27]],[3,R[100]],[3,"Buffer"],[3,R[18]],[3,R[19]],[3,R[27]],[3,R[115]],[3,R[116]],[3,R[118]],[3,"Rate"],[3,R[119]],[3,R[38]],[3,R[27]],[3,R[37]],[3,R[36]],[3,"Budget"],[3,R[108]],[3,R[27]],[3,"Retry"],[3,R[107]],[3,"Elapsed"],[3,R[27]],[3,"Timeout"],[3,R[112]],[3,R[11]],[3,"Stack"],[3,R[56]],[3,"CallAll"],[3,R[58]],[3,"Oneshot"],[3,R[59]],[3,"Ready"],[3,R[57]]]};
searchIndex["tower_balance"]={"doc":"Load balancing middlewares.","i":[[0,"error",R[134],R[29],N,N],[3,R[20],R[137],"An error returned when the balancer's endpoint discovery…",N,N],[0,"p2c",R[134],"A Power-of-Two-Choices Load Balancer",N,N],[3,R[140],R[138],"Efficiently distributes requests across an arbitrary…",N,N],[3,R[141],E,"Makes `Balancer`s given an inner service that makes…",N,N],[3,R[76],E,"Makes a balancer instance.",N,N],[3,"Balance",E,"Distributes requests across inner services using the…",N,N],[11,"new",E,"Builds a balancer using the system entropy.",0,[[],["self"]]],[11,"from_rng",E,"Builds a balancer from the provided RNG.",0,[[["r"]],[["error"],[R[0],["error"]]]]],[11,R[135],E,R[136],1,[[["s"]],["self"]]],[11,"new",E,"Initializes a P2C load balancer from the provided…",2,[[["d"],["smallrng"]],["self"]]],[11,R[135],E,R[136],2,[[["d"]],["self"]]],[11,"len",E,"Returns the number of endpoints currently tracked by the…",2,[[["self"]],["usize"]]],[0,"pool",R[134],"This module defines a load-balanced pool of services that…",N,N],[3,R[142],R[139],"A wrapper around `MakeService` that discovers a new…",N,N],[3,"Builder",E,"A [builder] that lets you configure how a [`Pool`]…",N,N],[3,"Pool",E,"A dynamically sized, load-balanced pool of `Service`…",N,N],[11,"new",E,"Create a new builder with default values for all load…",3,[[],["self"]]],[11,"underutilized_below",E,"When the estimated load (see the module-level docs) drops…",3,[[["self"],["f64"]],["self"]]],[11,"loaded_above",E,"When the estimated load (see the module-level docs)…",3,[[["self"],["f64"]],["self"]]],[11,"initial",E,"The initial estimated load average.",3,[[["self"],["f64"]],["self"]]],[11,"urgency",E,"How aggressively the estimated load average is updated.",3,[[["self"],["f64"]],["self"]]],[11,"max_services",E,"The maximum number of backing `Service` instances to…",3,[[[R[50],["usize"]],["self"],["usize"]],["self"]]],[11,"build",E,"See [`Pool::new`].",3,[[["ms"],["self"],[R[72]]],["pool"]]],[11,"new",E,"Construct a new dynamically sized `Pool`.",4,[[["ms"],[R[72]]],["self"]]],[11,"into",R[137],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[33],E,E,5,[[["self"]],["string"]]],[11,R[3],E,E,5,[[[U]],[R[0]]]],[11,R[4],E,E,5,[[],[R[0]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,"into",R[138],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,R[40],E,E,1,[[["self"],[R[72]]]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[3],E,E,6,[[[U]],[R[0]]]],[11,R[4],E,E,6,[[],[R[0]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,R[35],E,E,6,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,R[15],E,E,2,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,R[40],E,E,2,[[["self"],[R[72]]]]],[11,"into",R[139],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[3],E,E,7,[[[U]],[R[0]]]],[11,R[4],E,E,7,[[],[R[0]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[1],E,E,3,[[["self"]],[T]]],[11,R[2],E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,R[15],E,E,4,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,R[40],E,E,4,[[["self"],[R[72]]]]],[11,"clone",R[138],E,0,[[["self"]],["balancelayer"]]],[11,"clone",E,E,1,[[["self"]],["balancemake"]]],[11,"clone",R[139],E,3,[[["self"]],["builder"]]],[11,R[94],E,E,3,[[],["self"]]],[11,"fmt",R[137],E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[138],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,6,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[139],E,7,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[0]]]],[11,"source",R[137],E,5,[[["self"]],[[R[50],["error"]],["error"]]]],[11,"poll",R[138],E,6,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"layer",E,E,0,[[["s"],["self"]]]],[11,R[16],R[139],E,7,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,R[15],R[138],E,1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,1,[[["self"],[R[72]]]]],[11,R[15],E,E,2,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,2,[[["self"],["req"]]]],[11,R[15],R[139],E,4,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,4,[[["self"],["req"]]]]],"p":[[3,R[140]],[3,R[141]],[3,"Balance"],[3,"Builder"],[3,"Pool"],[3,R[20]],[3,R[76]],[3,R[142]]]};
searchIndex["tower_buffer"]={"doc":"Buffer requests when the inner service is out of capacity.","i":[[3,R[100],R[97],R[181],N,N],[3,"Buffer",E,R[182],N,N],[0,"error",E,R[29],N,N],[3,R[101],R[98],R[183],N,N],[3,"Closed",E,R[184],N,N],[0,R[54],R[97],R[31],N,N],[3,R[27],R[99],R[185],N,N],[11,"new",R[97],R[186],0,[[["usize"]],["self"]]],[11,"new",E,R[187],1,[[[T],["usize"]],["self"]]],[11,"pair",E,R[188],1,[[[T],["usize"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",R[98],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],["string"]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[33],E,E,3,[[["self"]],["string"]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",R[99],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[35],E,E,4,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[97],E,1,[[["self"]],["self"]]],[11,"fmt",R[98],E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[99],E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[97],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"source",R[98],E,2,[[["self"]],[[R[50],["error"]],["error"]]]],[11,"poll",R[99],E,4,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"layer",R[97],E,0,[[["s"],["self"]]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,1,[[["self"],[R[28]]]]]],"p":[[3,R[100]],[3,"Buffer"],[3,R[101]],[3,"Closed"],[3,R[27]]]};
searchIndex["tower_discover"]={"doc":"Tower service discovery","i":[[3,R[18],"tower_discover",R[189],N,N],[3,R[19],E,R[190],N,N],[4,"Change",E,R[191],N,N],[13,"Insert",E,R[192],0,N],[13,"Remove",E,R[193],0,N],[11,"new",E,E,1,[[[T]],[R[169]]]],[11,"new",E,E,2,[[["s"]],["self"]]],[8,R[20],E,R[194],N,N],[16,"Key",E,R[195],3,N],[16,R[12],E,R[196],3,N],[16,"Error",E,R[197],3,N],[10,R[16],E,R[84],3,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[16],E,E,1,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,R[16],E,E,2,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]]],"p":[[4,"Change"],[3,R[18]],[3,R[19]],[8,R[20]]]};
searchIndex["tower_filter"]={"doc":R[21],"i":[[3,R[25],R[22],R[21],N,N],[3,"Filter",E,R[21],N,N],[0,"error",E,R[29],N,N],[3,"Error",R[23],"Error produced by `Filter`",N,N],[11,"rejected",E,"Create a new `Error` representing a rejected request.",0,[[],["error"]]],[11,"inner",E,"Create a new `Error` representing an inner service error.",0,[[["e"]],["error"]]],[0,R[54],R[22],R[31],N,N],[3,R[27],R[24],"Filtered response future",N,N],[11,"new",R[22],E,1,[[[U]],["self"]]],[8,R[26],E,"Checks a request",N,N],[16,R[96],E,"The future returned by `check`.",2,N],[10,"check",E,"Check whether the given request should be forwarded.",2,[[[R[28]],["self"]]]],[11,"new",E,E,3,[[[U],[T]],["self"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[1],E,E,3,[[["self"]],[T]]],[11,R[2],E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",R[23],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[["self"]],["string"]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",R[24],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[35],E,E,4,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[22],E,3,[[["self"]],["filter"]]],[11,"fmt",R[23],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[24],E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[22],E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"source",R[23],E,0,[[["self"]],[[R[50],["error"]],["error"]]]],[11,"poll",R[24],E,4,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],R[22],E,3,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,3,[[["self"],[R[28]]]]],[11,"layer",E,E,1,[[["s"],["self"]]]]],"p":[[3,"Error"],[3,R[25]],[8,R[26]],[3,"Filter"],[3,R[27]]]};
searchIndex["tower_hedge"]={"doc":"Pre-emptively retry requests which have been outstanding…","i":[[3,"Hedge","tower_hedge","A middleware that pre-emptively retries requests which…",N,N],[3,R[96],E,"The Future returned by the hedge Service.",N,N],[8,"Policy",E,"A policy which describes which requests can be cloned and…",N,N],[10,R[104],E,"clone_request is called when the request is first received…",0,[[[R[28]],["self"]],[R[50]]]],[10,"can_retry",E,"can_retry is called after the hedge timeout to determine…",0,[[[R[28]],["self"]],["bool"]]],[11,"new",E,"Create a new hedge middleware.",1,[[["f32"],["p"],[R[95]],["s"],["u64"]],["hedge"]]],[11,"new_with_mock_latencies",E,"A hedge middleware with a prepopulated latency histogram.…",1,[[["f32"],["p"],[R[95]],["s"],["u64"]],["hedge"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[35],E,E,2,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"poll",E,E,2,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,1,[[["self"],[R[28]]]]]],"p":[[8,"Policy"],[3,"Hedge"],[3,R[96]]]};
searchIndex["tower_layer"]={"doc":"Layer traits and extensions.","i":[[3,R[11],"tower_layer",R[198],N,N],[3,"Stack",E,R[199],N,N],[11,"new",E,R[200],0,[[],[R[9]]]],[11,"new",E,R[201],1,[[["inner"],["outer"]],["self"]]],[8,"Layer",E,R[202],N,N],[16,R[12],E,R[203],2,N],[10,"layer",E,R[204],2,[[["s"],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"layer",E,E,0,[[["s"],["self"]]]],[11,"layer",E,E,1,[[["s"],["self"]]]],[11,"clone",E,E,0,[[["self"]],[R[9]]]],[11,"clone",E,E,1,[[["self"]],["stack"]]],[11,R[94],E,E,0,[[],[R[9]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]]],"p":[[3,R[11]],[3,"Stack"],[8,"Layer"]]};
searchIndex["tower_limit"]={"doc":"Tower middleware for limiting requests.","i":[[3,R[116],R[117],R[113],N,N],[3,R[115],E,R[113],N,N],[3,R[119],E,R[114],N,N],[3,R[118],E,R[114],N,N],[0,R[205],E,R[206],N,N],[3,R[115],"tower_limit::concurrency",R[113],N,N],[3,R[116],E,R[113],N,N],[0,R[54],E,R[31],N,N],[3,R[27],R[124],R[207],N,N],[11,"new",R[117],R[208],0,[[["usize"]],["self"]]],[11,"new",E,R[209],1,[[[T],["usize"]],["self"]]],[11,"get_ref",E,R[121],1,[[["self"]],[T]]],[11,"get_mut",E,R[122],1,[[["self"]],[T]]],[11,R[45],E,R[123],1,[[],[T]]],[0,"rate",E,R[210],N,N],[3,R[118],R[120],R[114],N,N],[3,"Rate",E,R[211],N,N],[3,R[119],E,R[114],N,N],[11,"new",R[117],R[212],2,[[["u64"],[R[95]]],["self"]]],[11,"new",R[120],R[213],3,[[["u64"],[R[95]]],["self"]]],[11,"new",R[117],R[214],4,[[[T],["rate"]],["self"]]],[11,"get_ref",E,R[121],4,[[["self"]],[T]]],[11,"get_mut",E,R[122],4,[[["self"]],[T]]],[11,R[45],E,R[123],4,[[],[T]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",R[124],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[3],E,E,5,[[[U]],[R[0]]]],[11,R[4],E,E,5,[[],[R[0]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[35],E,E,5,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[120],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[1],E,E,3,[[["self"]],[T]]],[11,R[2],E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"drop",R[124],E,5,[[["self"]]]],[11,"clone",R[117],E,0,[[["self"]],[R[171]]]],[11,"clone",E,E,1,[[["self"]],[R[175]]]],[11,"clone",R[120],E,3,[[["self"]],["rate"]]],[11,"fmt",R[124],E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[117],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[120],E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[117],E,4,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[124],E,5,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"drop",E,E,5,[[["self"],["pin"]]]],[11,"layer",R[117],E,0,[[["s"],["self"]]]],[11,"layer",E,E,2,[[["s"],["self"]]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,1,[[["self"],[R[28]]]]],[11,R[15],E,E,4,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,4,[[["self"],[R[28]]]]]],"p":[[3,R[115]],[3,R[116]],[3,R[118]],[3,"Rate"],[3,R[119]],[3,R[27]]]};
searchIndex["tower_load"]={"doc":"Abstractions and utilties for measuring a service's load.","i":[[3,R[86],R[78],"Wraps a type so that `Load::load` returns a constant value.",N,N],[3,R[87],E,"Attaches a `I`-typed instruments to the result of an…",N,N],[3,R[91],E,"A `Instrument` implementation that drops each instrument…",N,N],[11,"new",E,"Wraps a `T`-typed service with a constant `M`-typed load…",0,[[["m"],[T]],["self"]]],[11,"new",E,"Wraps a future, instrumenting its value if successful.",1,[[["i"],["f"],["h"]],["self"]]],[0,"peak_ewma",E,"A `Load` implementation that PeakEWMA on response latency.",N,N],[3,R[92],R[79],"Wraps an `S`-typed Service with Peak-EWMA load measurement.",N,N],[3,R[88],E,"Wraps a `D`-typed stream of discovery updates with…",N,N],[3,"Cost",E,"Represents the relative cost of communicating with a…",N,N],[3,"Handle",E,"Tracks an in-flight request and updates the RTT-estimate…",N,N],[11,"new",E,"Wraps a `D`-typed `Discover` so that services have a…",2,[[["d"],["i"],[R[95]]],["self"]]],[0,"pending_requests",R[78],"A `Load` implementation that uses the count of in-flight…",N,N],[3,R[93],R[80],"Expresses load based on the number of currently-pending…",N,N],[3,R[89],E,"Wraps `inner`'s services with `PendingRequests`.",N,N],[3,"Count",E,"Represents the number of currently-pending requests to a…",N,N],[3,"Handle",E,"Tracks an in-flight request by reference count.",N,N],[11,"new",E,"Wraps a `Discover``, wrapping all of its services with…",3,[[["d"],["i"]],["self"]]],[8,R[90],R[78],"Attaches `I`-typed instruments to `V` typed values.",N,N],[16,"Output",E,"The instrumented value type.",4,N],[10,R[81],E,"Attaches an `H`-typed handle to a `V`-typed value.",4,[[["v"],["self"],["h"]]]],[8,"Load",E,"Exposes a load metric.",N,N],[16,"Metric",E,"A comparable load metric. Lesser values are \"preferable\"…",5,N],[10,"load",E,"Obtains a service's load.",5,[[["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,R[35],E,E,1,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[1],E,E,6,[[["self"]],[T]]],[11,R[2],E,E,6,[[["self"],[T]]]],[11,R[3],E,E,6,[[[U]],[R[0]]]],[11,R[4],E,E,6,[[],[R[0]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"into",R[79],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[3],E,E,7,[[[U]],[R[0]]]],[11,R[4],E,E,7,[[],[R[0]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[1],E,E,8,[[["self"]],[T]]],[11,R[2],E,E,8,[[["self"],[T]]]],[11,R[3],E,E,8,[[[U]],[R[0]]]],[11,R[4],E,E,8,[[],[R[0]]]],[11,R[5],E,E,8,[[["self"]],[T]]],[11,R[6],E,E,8,[[["self"]],[T]]],[11,R[7],E,E,8,[[["self"]],[R[8]]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[3],E,E,9,[[[U]],[R[0]]]],[11,R[4],E,E,9,[[],[R[0]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,"into",R[80],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[3],E,E,10,[[[U]],[R[0]]]],[11,R[4],E,E,10,[[],[R[0]]]],[11,R[5],E,E,10,[[["self"]],[T]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[1],E,E,11,[[["self"]],[T]]],[11,R[2],E,E,11,[[["self"],[T]]]],[11,R[3],E,E,11,[[[U]],[R[0]]]],[11,R[4],E,E,11,[[],[R[0]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[3],E,E,12,[[[U]],[R[0]]]],[11,R[4],E,E,12,[[],[R[0]]]],[11,R[5],E,E,12,[[["self"]],[T]]],[11,R[6],E,E,12,[[["self"]],[T]]],[11,R[7],E,E,12,[[["self"]],[R[8]]]],[11,R[81],R[78],E,6,[[["v"],["self"],["h"]],["v"]]],[11,"load",E,E,0,[[["self"]],["m"]]],[11,"load",R[79],E,7,[[["self"]]]],[11,"load",R[80],E,10,[[["self"]],["count"]]],[11,"drop",R[79],E,9,[[["self"]]]],[11,"clone",R[78],E,6,[[["self"]],["noinstrument"]]],[11,"clone",R[79],E,8,[[["self"]],["cost"]]],[11,"clone",R[80],E,11,[[["self"]],["count"]]],[11,R[94],E,E,11,[[],["count"]]],[11,"cmp",E,E,11,[[["count"],["self"]],[R[82]]]],[11,"eq",R[79],E,8,[[["self"],["cost"]],["bool"]]],[11,"ne",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"eq",R[80],E,11,[[["count"],["self"]],["bool"]]],[11,"ne",E,E,11,[[["count"],["self"]],["bool"]]],[11,R[83],R[79],E,8,[[["self"],["cost"]],[[R[50],[R[82]]],[R[82]]]]],[11,"lt",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"le",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"gt",E,E,8,[[["self"],["cost"]],["bool"]]],[11,"ge",E,E,8,[[["self"],["cost"]],["bool"]]],[11,R[83],R[80],E,11,[[["count"],["self"]],[[R[50],[R[82]]],[R[82]]]]],[11,"lt",E,E,11,[[["count"],["self"]],["bool"]]],[11,"le",E,E,11,[[["count"],["self"]],["bool"]]],[11,"gt",E,E,11,[[["count"],["self"]],["bool"]]],[11,"ge",E,E,11,[[["count"],["self"]],["bool"]]],[11,"fmt",R[78],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,6,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[79],E,7,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,8,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,9,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[80],E,10,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,11,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,12,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[78],E,1,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[16],E,R[84],0,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,R[16],R[79],E,2,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,R[16],R[80],R[84],3,[[[R[17]],["self"],["pin"]],[["poll",[R[0]]],[R[0],[R[85]]]]]],[11,R[15],R[78],E,0,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,0,[[["self"],[R[28]]]]],[11,R[15],R[79],E,7,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,7,[[["self"],[R[28]]]]],[11,R[15],R[80],E,10,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,10,[[["self"],[R[28]]]]]],"p":[[3,R[86]],[3,R[87]],[3,R[88]],[3,R[89]],[8,R[90]],[8,"Load"],[3,R[91]],[3,R[92]],[3,"Cost"],[3,"Handle"],[3,R[93]],[3,"Count"],[3,"Handle"]]};
searchIndex["tower_load_shed"]={"doc":"Tower middleware for shedding load when inner services…","i":[[3,R[36],R[30],R[215],N,N],[3,R[37],E,R[216],N,N],[0,"error",E,R[29],N,N],[3,R[38],R[32],R[217],N,N],[0,R[54],R[30],R[31],N,N],[3,R[27],R[34],R[218],N,N],[11,"new",R[30],R[219],0,[[],["self"]]],[11,"new",E,R[220],1,[[["s"]],["self"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",R[32],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],["string"]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",R[34],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[35],E,E,3,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[30],E,0,[[["self"]],[R[172]]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"fmt",R[32],E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[34],E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[30],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[34],E,3,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],R[30],E,1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,1,[[["self"],["req"]]]],[11,"layer",E,E,0,[[["s"],["self"]]]]],"p":[[3,R[36]],[3,R[37]],[3,R[38]],[3,R[27]]]};
searchIndex["tower_make"]={"doc":"Trait aliases for Services that produce specific types of…","i":[[8,R[13],"tower_make","Creates new `Service` values.",N,N],[16,R[14],E,"Responses given by the service",0,N],[16,"Error",E,"Errors produced by the service",0,N],[16,R[12],E,"The `Service` value created by this factory",0,N],[16,"MakeError",E,"Errors produced while building a service.",0,N],[16,R[96],E,"The future of the `Service` instance.",0,N],[10,R[15],E,"Returns `Ready` when the factory is able to create more…",0,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[10,R[40],E,"Create and return a new service value asynchronously.",0,[[["self"],[R[72]]]]]],"p":[[8,R[13]]]};
searchIndex["tower_ready_cache"]={"doc":"A cache of services","i":[[0,"cache",R[65],"A cache of services.",N,N],[8,R[68],R[66],"Key equivalence trait.",N,N],[10,"equivalent",E,"Compare self to `key` and return `true` if they are equal.",0,[[["k"],["self"]],["bool"]]],[3,R[69],E,"Drives readiness over a set of services.",N,N],[11,"len",E,"Returns the total number of services in the cache.",1,[[["self"]],["usize"]]],[11,"ready_len",E,"Returns the number of services in the ready set.",1,[[["self"]],["usize"]]],[11,"pending_len",E,"Returns the number of services in the unready set.",1,[[["self"]],["usize"]]],[11,"pending_contains",E,"Returns true iff the given key is in the unready set.",1,[[["self"],["q"]],["bool"]]],[11,"get_ready",E,"Obtains a reference to a service in the ready set by key.",1,[[["self"],["q"]],[R[50]]]],[11,"get_ready_mut",E,R[62],1,[[["self"],["q"]],[R[50]]]],[11,"get_ready_index",E,"Obtains a reference to a service in the ready set by index.",1,[[["self"],["usize"]],[R[50]]]],[11,"get_ready_index_mut",E,R[62],1,[[["self"],["usize"]],[R[50]]]],[11,"evict",E,"Evicts an item from the cache.",1,[[["self"],["q"]],["bool"]]],[11,"push",E,"Pushes a new service onto the pending set.",1,[[["self"],["k"],["s"]]]],[11,"poll_pending",E,"Polls services pending readiness, adding ready services to…",1,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0],[R[64]]]]]],[11,"check_ready",E,R[63],1,[[["q"],["self"],[R[17]]],[[R[0],["bool",R[64]]],[R[64]],["bool"]]]],[11,"check_ready_index",E,R[63],1,[[["self"],["usize"],[R[17]]],[[R[0],["bool",R[64]]],[R[64]],["bool"]]]],[11,"call_ready",E,"Calls a ready service by key.",1,[[["req"],["self"],["q"]]]],[11,"call_ready_index",E,"Calls a ready service by index.",1,[[["self"],["usize"],["req"]]]],[0,"error",R[65],"Errors",N,N],[3,"Failed",R[67],"An error indicating that the service with a `K`-typed key…",N,N],[12,"0",E,E,2,N],[12,"1",E,E,2,N],[6,"Error",E,"A generic error type.",N,N],[11,"into",R[66],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",R[67],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],["string"]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,R[94],R[66],E,1,[[],["self"]]],[11,"fmt",R[67],E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[66],E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[67],E,2,[[["self"],[R[10]]],[R[0]]]],[11,"source",E,E,2,[[["self"]],[[R[50],["error"]],["error"]]]]],"p":[[8,R[68]],[3,R[69]],[3,"Failed"]]};
searchIndex["tower_reconnect"]={"doc":E,"i":[[3,R[42],R[39],"Reconnect to failed services.",N,N],[0,R[54],E,E,N,N],[3,R[27],R[41],"Future that resolves to the response or failure to connect.",N,N],[11,"new",R[39],"Lazily connect and reconnect to a Service.",0,[[["m"],[R[72]]],["self"]]],[11,"with_connection",E,"Reconnect to a already connected Service.",0,[[["m"],[R[72]]],["self"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[15],E,E,0,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,R[40],E,E,0,[[["self"],[R[72]]]]],[11,"into",R[41],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[39],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[41],E,1,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],R[39],E,0,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,0,[[["self"],[R[28]]]]]],"p":[[3,R[42]],[3,R[27]]]};
searchIndex["tower_retry"]={"doc":"Tower middleware for retrying \"failed\" requests.","i":[[3,R[107],R[103],R[221],N,N],[3,"Retry",E,R[222],N,N],[0,"budget",E,R[223],N,N],[3,"Budget",R[105],R[224],N,N],[3,R[108],E,R[225],N,N],[11,"new",E,R[226],0,[[["f32"],["u32"],[R[95]]],["self"]]],[11,"deposit",E,R[227],0,[[["self"]]]],[11,"withdraw",E,R[228],0,[[["self"]],[[R[102]],[R[0],[R[102]]]]]],[0,R[54],R[103],R[31],N,N],[3,R[27],R[106],R[229],N,N],[11,"new",R[103],R[230],1,[[["p"]],["self"]]],[8,"Policy",E,R[231],N,N],[16,R[96],E,R[232],2,N],[10,"retry",E,R[233],2,[[["res"],[R[0]],["req"],["self"],["e"]],[R[50]]]],[10,R[104],E,R[234],2,[[["req"],["self"]],[R[50]]]],[11,"new",E,R[235],3,[[["s"],["p"]],["self"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[1],E,E,3,[[["self"]],[T]]],[11,R[2],E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",R[105],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"into",R[106],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[3],E,E,5,[[[U]],[R[0]]]],[11,R[4],E,E,5,[[],[R[0]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[35],E,E,5,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[103],E,3,[[["self"]],["retry"]]],[11,R[94],R[105],E,0,[[],["budget"]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[106],E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[103],E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[106],E,5,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],R[103],E,3,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,3,[[["self"],[R[28]]]]],[11,"layer",E,E,1,[[["s"],["self"]]]]],"p":[[3,"Budget"],[3,R[107]],[8,"Policy"],[3,"Retry"],[3,R[108]],[3,R[27]]]};
searchIndex["tower_service"]={"doc":"Definition of the core `Service` trait to Tower","i":[[8,R[12],"tower_service",R[236],N,N],[16,R[14],E,R[237],0,N],[16,"Error",E,R[238],0,N],[16,R[96],E,R[239],0,N],[10,R[15],E,R[240],0,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[10,"call",E,R[241],0,[[["self"],[R[28]]]]]],"p":[[8,R[12]]]};
searchIndex["tower_spawn_ready"]={"doc":"When an underlying service is not ready, drive it to…","i":[[3,R[73],R[70],"Spawns tasks to drive its inner service to readiness.",N,N],[3,R[76],E,"Builds a SpawnReady with the result of an inner Future.",N,N],[3,R[74],E,"Builds SpawnReady instances with the result of an inner…",N,N],[3,R[75],E,"Spawns tasks to drive an inner service to readiness.",N,N],[0,R[54],E,"Background readiness types",N,N],[3,R[77],R[71],"Drives a service to readiness.",N,N],[11,"new",R[70],"Builds a SpawnReady layer with the default executor.",0,[[],["self"]]],[11,"new",E,"Creates a new `MakeSpawnReady` wrapping `service`.",1,[[["s"]],["self"]]],[11,"new",E,"Creates a new `SpawnReady` wrapping `service`.",2,[[[T]],["self"]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[35],E,E,3,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[1],E,E,1,[[["self"]],[T]]],[11,R[2],E,E,1,[[["self"],[T]]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",R[71],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"clone",R[70],E,0,[[["self"]],["spawnreadylayer"]]],[11,"clone",E,E,1,[[["self"]],["makespawnready"]]],[11,"fmt",R[71],E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[70],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[71],E,4,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"poll",R[70],E,3,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,1,[[["self"],[R[72]]]]],[11,R[15],E,E,2,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,2,[[["self"],[R[28]]]]],[11,"layer",E,E,0,[[["s"],["self"]]]]],"p":[[3,R[73]],[3,R[74]],[3,R[75]],[3,R[76]],[3,R[77]]]};
searchIndex["tower_test"]={"doc":R[125],"i":[[0,"mock",R[129],R[125],N,N],[3,"Mock",R[126],"A mock service",N,N],[3,"Handle",E,"Handle to the `Mock`.",N,N],[3,R[133],E,"Send a response in reply to a received request.",N,N],[5,"spawn_layer",E,"Spawn a layer onto a mock service.",N,[[["l"]]]],[5,"spawn",E,"Spawn a Service onto a mock task.",N,[[]]],[5,"spawn_with",E,"Spawn a Service via the provided wrapper closure.",N,[[["f"]]]],[5,"pair",E,"Create a new `Mock` and `Handle` pair.",N,[[]]],[0,"error",E,R[29],N,N],[3,"Closed",R[130],"Error yielded when a mocked service does not yet accept…",N,N],[0,R[54],R[126],R[31],N,N],[3,R[27],R[131],"Future of the `Mock` response.",N,N],[0,"spawn",R[126],"Spawn mock services onto a mock task.",N,N],[3,"Spawn",R[132],"Service spawned on a mock task",N,N],[11,"new",E,"Create a new spawn.",0,[[[T]],["self"]]],[11,"is_woken",E,"Check if this service has been woken up.",0,[[["self"]],["bool"]]],[11,"waker_ref_count",E,"Get how many futurs are holding onto the waker.",0,[[["self"]],["usize"]]],[11,R[15],E,"Poll this service ready.",0,[[["self"]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,"Call the inner Service.",0,[[["self"],[R[28]]]]],[11,R[45],E,"Get the inner service.",0,[[],[T]]],[11,"get_ref",E,"Get a reference to the inner service.",0,[[["self"]],[T]]],[11,"get_mut",E,"Get a mutable reference to the inner service.",0,[[["self"]],[T]]],[11,"poll_request",R[126],"Asynchronously gets the next request",1,[[["self"]],[[R[50]],["poll",[R[50]]]]]],[11,"next_request",E,"Gets the next request.",1,[[["self"]]]],[11,"allow",E,"Allow a certain number of requests",1,[[["self"],["u64"]]]],[11,R[127],E,"Make the next poll_ method error with the given error.",1,[[["box",["error"]],["self"],["into",["box"]]]]],[11,"send_response",E,R[128],2,[[[T]]]],[11,R[127],E,R[128],2,[[["box",["error"]],["into",["box"]]]]],[14,"assert_request_eq",R[129],"Asserts that the mock handle receives a new request equal…",N,N],[11,"into",R[126],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[1],E,E,3,[[["self"]],[T]]],[11,R[2],E,E,3,[[["self"],[T]]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",R[130],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[33],E,E,4,[[["self"]],["string"]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,"into",R[131],E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[3],E,E,5,[[[U]],[R[0]]]],[11,R[4],E,E,5,[[],[R[0]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[35],E,E,5,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[132],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"drop",R[126],E,3,[[["self"]]]],[11,"drop",E,E,1,[[["self"]]]],[11,"clone",R[132],E,0,[[["self"]],["self"]]],[11,"clone",R[126],E,3,[[["self"]],["self"]]],[11,"fmt",R[130],E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[131],E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[132],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[126],E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[131],E,5,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],R[126],E,3,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,3,[[["self"],[T]]]]],"p":[[3,"Spawn"],[3,"Handle"],[3,R[133]],[3,"Mock"],[3,"Closed"],[3,R[27]]]};
searchIndex["tower_timeout"]={"doc":"Tower middleware that applies a timeout to requests.","i":[[3,R[112],R[109],R[242],N,N],[3,"Timeout",E,R[243],N,N],[0,"error",E,R[29],N,N],[3,"Elapsed",R[110],R[244],N,N],[11,"new",E,R[245],0,[[],["self"]]],[0,R[54],R[109],R[31],N,N],[3,R[27],R[111],R[246],N,N],[11,"new",R[109],R[247],1,[[[R[95]]],["self"]]],[11,"new",E,R[248],2,[[[T],[R[95]]],["self"]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[1],E,E,2,[[["self"]],[T]]],[11,R[2],E,E,2,[[["self"],[T]]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",R[110],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[["self"]],["string"]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,"into",R[111],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[35],E,E,3,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[109],E,2,[[["self"]],["timeout"]]],[11,"fmt",R[110],E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[111],E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[109],E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"poll",R[111],E,3,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"layer",R[109],E,1,[[["s"],["self"]]]],[11,R[15],E,E,2,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,2,[[["self"],[R[28]]]]]],"p":[[3,"Elapsed"],[3,R[112]],[3,"Timeout"],[3,R[27]]]};
searchIndex["tower_util"]={"doc":"Various utility types and functions that are generally…","i":[[3,R[56],R[48],R[249],N,N],[3,R[57],E,R[250],N,N],[3,"Oneshot",E,R[251],N,N],[3,R[59],E,R[252],N,N],[3,"Ready",E,R[253],N,N],[3,R[61],E,"A `Service` implemented by a closure.",N,N],[3,"CallAll",E,R[254],N,N],[3,R[58],E,R[255],N,N],[4,"Either",E,R[256],N,N],[13,"A",E,R[257],0,N],[13,"B",E,R[258],0,N],[5,R[259],E,R[260],N,[[[T]],[R[53]]]],[11,"new",E,E,1,[[["s"]],["self"]]],[11,"new",E,E,2,[[["s"]],["self"]]],[11,"new",E,R[261],3,[[["s"],["svc"]],[R[179]]]],[11,R[45],E,R[43],3,[[],["svc"]]],[11,R[46],E,R[43],3,[[["self"],["pin"]],["svc"]]],[11,R[262],E,R[263],3,[[],[R[44]]]],[11,"new",E,R[264],4,[[["s"],["svc"]],[R[44]]]],[11,R[45],E,R[43],4,[[],["svc"]]],[11,R[46],E,R[43],4,[[["self"],["pin"]],["svc"]]],[11,"new",E,E,5,[[["s"],["req"]],["self"]]],[11,"new",E,R[265],6,[[[R[50]]],[R[47]]]],[11,"new",E,E,7,[[[T]],["self"]]],[0,"error",E,R[29],N,N],[0,R[47],"tower_util::error","Error types for `OptionalService`.",N,N],[3,"None",R[51],"Error returned if the inner `Service` has not been set.",N,N],[0,R[54],R[48],R[31],N,N],[0,R[47],"tower_util::future","Future types for `OptionalService`.",N,N],[3,R[27],R[52],"Response future returned by `Optional`.",N,N],[8,R[60],R[48],R[150],N,N],[11,"ready",E,R[151],8,[[["self"]],["ready"]]],[11,R[173],E,R[152],8,[[[R[28]]],[R[173]]]],[11,R[266],E,R[153],8,[[["s"]],[R[179]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[3],E,E,1,[[[U]],[R[0]]]],[11,R[4],E,E,1,[[],[R[0]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[T]]],[11,R[7],E,E,1,[[["self"]],[R[8]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[3],E,E,2,[[[U]],[R[0]]]],[11,R[4],E,E,2,[[],[R[0]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[T]]],[11,R[7],E,E,2,[[["self"]],[R[8]]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[3],E,E,5,[[[U]],[R[0]]]],[11,R[4],E,E,5,[[],[R[0]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[T]]],[11,R[7],E,E,5,[[["self"]],[R[8]]]],[11,R[35],E,E,5,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[3],E,E,6,[[[U]],[R[0]]]],[11,R[4],E,E,6,[[],[R[0]]]],[11,R[5],E,E,6,[[["self"]],[T]]],[11,R[6],E,E,6,[[["self"]],[T]]],[11,R[7],E,E,6,[[["self"]],[R[8]]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[3],E,E,7,[[[U]],[R[0]]]],[11,R[4],E,E,7,[[],[R[0]]]],[11,R[5],E,E,7,[[["self"]],[T]]],[11,R[6],E,E,7,[[["self"]],[T]]],[11,R[7],E,E,7,[[["self"]],[R[8]]]],[11,R[35],E,E,7,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[1],E,E,9,[[["self"]],[T]]],[11,R[2],E,E,9,[[["self"],[T]]]],[11,R[3],E,E,9,[[[U]],[R[0]]]],[11,R[4],E,E,9,[[],[R[0]]]],[11,R[5],E,E,9,[[["self"]],[T]]],[11,R[6],E,E,9,[[["self"]],[T]]],[11,R[7],E,E,9,[[["self"]],[R[8]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[3],E,E,3,[[[U]],[R[0]]]],[11,R[4],E,E,3,[[],[R[0]]]],[11,R[5],E,E,3,[[["self"]],[T]]],[11,R[6],E,E,3,[[["self"]],[T]]],[11,R[7],E,E,3,[[["self"]],[R[8]]]],[11,R[49],E,E,3,[[[R[17]],["s"],["pin"]],[[R[50],[R[0]]],["poll",[R[50]]]]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[3],E,E,4,[[[U]],[R[0]]]],[11,R[4],E,E,4,[[],[R[0]]]],[11,R[5],E,E,4,[[["self"]],[T]]],[11,R[6],E,E,4,[[["self"]],[T]]],[11,R[7],E,E,4,[[["self"]],[R[8]]]],[11,R[49],E,E,4,[[[R[17]],["s"],["pin"]],[[R[50],[R[0]]],["poll",[R[50]]]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[1],E,E,0,[[["self"]],[T]]],[11,R[2],E,E,0,[[["self"],[T]]]],[11,R[3],E,E,0,[[[U]],[R[0]]]],[11,R[4],E,E,0,[[],[R[0]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[T]]],[11,R[7],E,E,0,[[["self"]],[R[8]]]],[11,R[35],E,E,0,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"into",R[51],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[33],E,E,10,[[["self"]],["string"]]],[11,R[3],E,E,10,[[[U]],[R[0]]]],[11,R[4],E,E,10,[[],[R[0]]]],[11,R[5],E,E,10,[[["self"]],[T]]],[11,R[6],E,E,10,[[["self"]],[T]]],[11,R[7],E,E,10,[[["self"]],[R[8]]]],[11,"into",R[52],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[3],E,E,11,[[[U]],[R[0]]]],[11,R[4],E,E,11,[[],[R[0]]]],[11,R[5],E,E,11,[[["self"]],[T]]],[11,R[6],E,E,11,[[["self"]],[T]]],[11,R[7],E,E,11,[[["self"]],[R[8]]]],[11,R[35],E,E,11,[[["pin"],["f"],[R[17]]],["poll"]]],[11,"clone",R[48],E,0,[[["self"]],["either"]]],[11,"clone",E,E,9,[[["self"]],[R[53]]]],[11,"fmt",R[51],E,10,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[48],E,1,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,2,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,3,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,4,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,0,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,5,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[51],E,10,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[52],E,11,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",R[48],E,6,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,7,[[["self"],[R[10]]],[R[0]]]],[11,"fmt",E,E,9,[[["self"],[R[10]]],[R[0]]]],[11,"poll",E,E,0,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"poll",E,E,5,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"poll",R[52],E,11,[[[R[17]],["self"],["pin"]],["poll"]]],[11,"poll",R[48],E,7,[[[R[17]],["self"],["pin"]],["poll"]]],[11,R[15],E,E,1,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,1,[[["self"],[T]],[["pin",["box"]],["box",[R[54]]]]]],[11,R[15],E,E,2,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,2,[[["self"],[T]],[["pin",["box"]],["box",[R[54]]]]]],[11,R[15],E,E,0,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,0,[[["self"],[R[28]]]]],[11,R[15],E,E,6,[[["self"],[R[17]]],[["poll",[R[0]]],[R[0]]]]],[11,"call",E,E,6,[[["self"],[R[28]]]]],[11,R[15],E,E,9,[[["self"],[R[17]]],[[R[0]],["poll",[R[0]]]]]],[11,"call",E,E,9,[[["self"],[R[28]]]]],[11,R[55],E,E,3,[[[R[17]],["self"],["pin"]],[["poll",[R[50]]],[R[50]]]]],[11,R[55],E,E,4,[[[R[17]],["self"],["pin"]],[["poll",[R[50]]],[R[50]]]]]],"p":[[4,"Either"],[3,R[56]],[3,R[57]],[3,"CallAll"],[3,R[58]],[3,"Oneshot"],[3,R[59]],[3,"Ready"],[8,R[60]],[3,R[61]],[3,"None"],[3,R[27]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);